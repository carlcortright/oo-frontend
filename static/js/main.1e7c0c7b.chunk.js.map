{"version":3,"sources":["api/APIHelpers.js","scenes/ClassroomView.js","scenes/CreateClassroom.js","App.js","serviceWorker.js","index.js"],"names":["GetLatestQuestions","classname","last_id","axios","get","params","classroom","id","CreateClassroomAPI","post","name","ClassroomView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pollForQuestions","self","assertThisInitialized","state","last_question","then","result","data","length","setState","questions","concat","formatPhoneNumber","number_string","match","replace","join","createQuestions","cards","i","content","push","react_default","a","createElement","dist","fontSize","fontWeight","width","p","my","boxShadow","phone_number","url","GetClass","last_question_id","last_index","timer","setInterval","clearInterval","noQuestionsPrompt","textAlign","justifyContent","flexWrap","QuestionList","Component","styled","div","_templateObject","CreateClassroom","createClass","console","log","class_name","history","updateClassname","event","target","value","TallFlex","alignItems","CreateDiv","ClassInput","placeholder","onChange","bg","alignSelf","onClick","Flex","CreateClassroom_templateObject","_templateObject2","input","_templateObject3","App","react_router_dom","color","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e7c0c7b.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const GetClass = (classname)  => {\n    let url = 'http://api.classqa.carl.fun/api/class/' + classname;\n    return axios.get(url);\n}\n\nexport const GetLatestQuestions = (classname, last_id)  => {\n    let url = 'http://api.classqa.carl.fun/api/list_questions';\n    return axios.get(url, {params: {\n        classroom: classname,\n        id: last_id,\n      }});\n}\n\nexport const CreateClassroomAPI = (classname)  => {\n    let url = 'http://api.classqa.carl.fun/api/create_classroom';\n    return axios.post(url, { name: classname });\n}","import React, { Component } from 'react';\nimport { Heading, Card, Flex } from 'rebass';\nimport { GetClass, GetLatestQuestions } from '../api/APIHelpers';\nimport styled from 'styled-components'\n\nclass ClassroomView extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            phone_number: null,\n            questions: [],\n            classname: '',\n            last_question: 0\n        }\n    }\n\n    componentDidMount () {\n        let self = this;\n        const { classroom } = this.props.match.params\n        let response = GetClass(classroom)\n        response.then(function(result) {\n            // Make the call to get the initial classroom data\n            let last_question_id = 0;\n            if (result.data.questions.length > 0) {\n                let last_index = result.data.questions.length - 1;\n                last_question_id = result.data.questions[last_index].id;\n            }\n            self.setState({\n                phone_number: result.data.phone_number,\n                questions: result.data.questions,\n                last_question: last_question_id,\n                classname: classroom\n            })\n            // Start polling to get all new questions\n            self.timer = setInterval(() => self.pollForQuestions(), 500);\n        })\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    pollForQuestions = () => {\n        let self = this;\n        let response = GetLatestQuestions(this.state.classname, this.state.last_question)\n        response.then(function(result){\n            let data = result.data;\n            if (data.length > 0){\n                self.setState({\n                    questions: self.state.questions.concat(data),\n                    last_question: data[data.length-1].id\n                })\n            }\n        })\n    }\n\n    formatPhoneNumber = (number_string) => {\n        var cleaned = ('' + number_string).replace(/\\D/g, '')\n        var match = cleaned.match(/^(1|)?(\\d{3})(\\d{3})(\\d{4})$/)\n        if (match) {\n            var intlCode = (match[1] ? '+1 ' : '')\n            return [intlCode, '(', match[2], ') ', match[3], '-', match[4]].join('')\n        }\n        return null\n    }\n\n    createQuestions = (questions) => {\n        let cards = []\n        for (let i = questions.length-1; i >= 0; i--) {\n            let content = questions[i].content\n            cards.push(\n                <Card\n                    fontSize={3}\n                    fontWeight='bold'\n                    width={[ 1, 1, 1]}\n                    p={3}\n                    my={3}\n                    boxShadow='0 2px 16px rgba(0, 0, 0, 0.25)'\n                >\n                    {content}\n                </Card>\n            )\n\n        }\n        return cards\n    }\n\n    render() {\n        let noQuestionsPrompt = null;\n        if (this.state.questions.length === 0) {\n            noQuestionsPrompt = <Heading textAlign='center'>No questions have been created in this space.</Heading>\n        }\n        return (\n        <div>\n            <Heading \n                textAlign='center'\n                fontSize={[ 3, 4, 5, 6 ]}\n                p={4}\n            >\n                {this.formatPhoneNumber(this.state.phone_number)}\n            </Heading>\n            <Flex justifyContent='center' flexWrap='wrap'>\n                {noQuestionsPrompt}\n                <QuestionList>\n                    {this.createQuestions(this.state.questions)}\n                </QuestionList>\n            </Flex>\n        </div>\n        );\n    }\n}\n\nconst QuestionList = styled.div`\n    flex: 0 1 800px;\n`\n\nexport default ClassroomView;\n","import React, { Component } from 'react';\nimport { Button, Flex, Heading } from 'rebass';\nimport styled from 'styled-components'\nimport { CreateClassroomAPI } from '../api/APIHelpers';\n\nclass CreateClassroom extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            classname: ''\n        }\n    }\n\n    createClass = () => {\n        let self = this;\n        let response = CreateClassroomAPI(this.state.classname);\n        response.then(function(result){\n            // TODO: Handle Errors\n            console.log(result)\n            let name = result.data.class_name;\n            self.props.history.push('/class/' + name)\n        })\n        \n    }\n\n    updateClassname = (event) => {\n        this.setState({\n            classname: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <TallFlex\n            alignItems='center'\n            justifyContent='center'\n            flexWrap='wrap'\n            >\n                <CreateDiv>\n                    <Heading \n                        textAlign='center'\n                        fontSize={[ 6, 8 ]}\n                        p={4}\n                    >\n                        ClassQA\n                    </Heading>\n                    <ClassInput \n                        placeholder='Classroom Name'\n                        value={this.state.classname} \n                        onChange={this.updateClassname}\n                    ></ClassInput>\n                    <Button \n                        bg='#175451'\n                        my={3}\n                        alignSelf='center'\n                        fontSize={4}\n                        onClick={this.createClass}\n                    >\n                        Create Classroom\n                    </Button>\n                </CreateDiv>\n                \n            </TallFlex>\n        );\n    }\n}\n\nconst TallFlex = styled(Flex)`\n  height: calc(100vh - 60px);\n`\n\nconst CreateDiv = styled.div`\n    flex: 0 1 600px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`\n\nconst ClassInput = styled.input`\n    width: 100%;\n    font-size: 22px;\n    border-radius: 5px;\n    border: 2px solid #ccc;\n    padding: 3px;\n`\n\nexport default CreateClassroom;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport ClassroomView from './scenes/ClassroomView';\nimport CreateClassroom from './scenes/CreateClassroom';\nimport { Box } from 'rebass';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Box\n              p={3}\n              fontSize={4}\n              width={[1]}\n              color='white'\n              bg='#175451'>\n              ClassQA\n          </Box>\n          <Route exact path=\"/\" component={CreateClassroom} />\n          <Route path=\"/class/:classroom\" component={ClassroomView} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}